name: VPS Status Monitor

on:
  push:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    - cron: '*/5 * * * *'

jobs:
  check-vps-status:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests

    - name: Check VPS Status
      env:
        SG_VPS_URL: ${{ secrets.SG_VPS_URL }}
        US_VPS_URL: ${{ secrets.US_VPS_URL }}
      run: |
        python3 - << EOF
        import requests
        import json
        from datetime import datetime
        import os

        def check_vps_status(url):
            try:
                # Attempt to connect with a longer timeout
                response = requests.get(
                    url, 
                    timeout=10,  # 10 seconds timeout
                    allow_redirects=True,
                    verify=False  # Disable SSL verification if needed
                )
                
                # Consider status codes that indicate a successful connection
                is_online = response.status_code in [200, 204, 301, 302]
                
                return {
                    'status': is_online,
                    'uptime': f'Status Code: {response.status_code}',
                    'last_checked': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                }
            except Exception as e:
                # Any exception means the VPS is likely offline
                return {
                    'status': False,
                    'uptime': str(e),
                    'last_checked': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                }

        # Get URLs from environment variables
        sg_url = os.environ.get('SG_VPS_URL')
        us_url = os.environ.get('US_VPS_URL')

        # Check VPS status
        status = {
            'singapore': check_vps_status(sg_url),
            'us': check_vps_status(us_url)
        }

        # Write status to JSON file
        with open('vps_status.json', 'w') as f:
            json.dump(status, f, indent=2)

        print("VPS Status Check Complete")
        EOF

    - name: Commit and Push Changes
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        git add vps_status.json
        git commit -m "Update VPS status" || echo "No changes to commit"
        git push
